import os
from pylatex import Document, Section, Subsection, Figure, NoEscape, NewPage, Package

def add_multiple_figures_to_page(doc, folder, list_of_fig_names, titles=None, captions=None, scaling_param=None):
    """
    Adds multiple figures (and LaTeX captions/titles) to a PyLaTeX document with scaling support.
    """
    for i, fig_name in enumerate(list_of_fig_names):
        fig_path = os.path.join(folder, fig_name + '.png')
        
        # Determine scaling (default to 0.5\textwidth if no scaling provided)
        scale = scaling_param[i] if scaling_param and i < len(scaling_param) else 0.5
        
        # Add figure
        with doc.create(Figure(position='h!')) as fig:
            fig.add_image(fig_path, width=NoEscape(f'{scale}\\textwidth'))  # Apply scaling here
            # Add title (if available)
            if titles and i < len(titles):
                fig.add_caption(NoEscape(titles[i]))
            
            # Add caption (if available)
            if captions and i < len(captions):
                doc.append(NoEscape(captions[i]))
        doc.append(NoEscape(r'\vspace{1cm}'))  # Adds 1cm of vertical space after each figure
        

def make_pdf_from_figures(folder, list_of_fig_names, list_of_titles, list_of_captions, sup_title, pdf_file_name, scaling_params=None):
    """ Create a PDF file from a list of figures and captions using PyLaTeX, with scaling support """
    # Create a new PyLaTeX document
    doc = Document()

    # Add necessary packages
    doc.packages.append(Package('amsmath'))  # Add amsmath package
    doc.packages.append(Package('geometry', options=['margin=1in']))
    doc.packages.append(Package('caption'))  # To control caption alignment

    # Set captions to be left-aligned
    doc.append(NoEscape(r'\captionsetup{justification=raggedright}'))

    # Add a super title
    doc.preamble.append(NoEscape(r'\title{%s}' % sup_title))
    doc.preamble.append(NoEscape(r'\date{}'))  # Remove date
    doc.append(NoEscape(r'\maketitle'))  # Add the title to the document
    
    # Loop over the list of figures and add them to the document
    for i, fig_names in enumerate(list_of_fig_names):
        # Pass scaling_params[i] to the page function
        add_multiple_figures_to_page(doc, folder, fig_names, list_of_titles[i], list_of_captions[i], scaling_params[i] if scaling_params else None)
        doc.append(NewPage())  # Start a new page after each set of figures
    # Generate the PDF
    pdf_file_path = os.path.join(folder, pdf_file_name)
    doc.generate_pdf(pdf_file_path, clean_tex=False, compiler='pdflatex')

################## MAIN CODE ##################

list_of_fig_names = [['schematics_wide'],['offset_pre_post','boxplot_relative_changes'], ['tc_features_train_color_by_phase', 'tc_features_train_color_by_run_index', 'tc_features_train_color_by_pref_ori', 'tc_features_train_color_by_type'], ['tc_slope_train_color_by_type'], ['Offset_corr_staircase'], ['MVPA_match_paper_fig']]
#caption_schematics = [r"Top Panel: The model consists of two layers, with each layer's nodes arranged in a 9x9 grid. The input image (left) is passed through Gabor filters before processing in the middle layer. Excitatory (E) cells in the middle layer provide inputs to the second layer, where long-range connections are depicted with black arrows. Cell colors indicate inhibitory (blue) and excitatory (red) properties, while shades in the first layer correspond to different phases. \\ Bottom Panel: The orientation discrimination decision is generated by passing both input gratings through the model. The resulting outputs are subtracted and processed through a sigmoid function to form the final decision."]
#caption_offset_pre_post = r'Offset at which accuracy is 75 \% before training and offset from 3-up-1-down staircase algorithm at the end of training training. The offset represents the difference between the orientations of the two gratings used in the orientation discrimination task, measured in degrees.'
#caption_boxplot_rel_change = r'First Plot (left): Relative changes (in percent) in the middle layer connectivity parameters $J^{\text{mid}}_{AB}$, where $A, B \in \{E, I\}$, before and after training. \textbf{Second Plot:} Relative changes in the superficial layer connectivity parameters $J^{\text{sup}}_{AB}$, where $A, B \in \{E, I\}$. \textbf{Third Plot:} Relative changes in baseline parameters added to the i) middle layer excitatory cells $c^{\text{mid}}_E$, ii) middle layer inhibitory cells $c^{\text{mid}}_I$, iii) superficial layer excitatory cells $c^{\text{sup}}_E$, and iv) superficial layer inhibitory cells $c^{\text{sup}}_I$. \textbf{Fourth Plot:} Relative changes in the feedforward weights between the two layers $f^{\text{mid} \rightarrow \text{sup}}_{E \rightarrow E}$, $f^{\text{mid} \rightarrow \text{sup}}_{E \rightarrow I}$. Fifth Plot (right): Absolute changes in the pre-synaptic and post-synaptic weights of the superficial layer excitatory cells $\kappa^{\text{pre}}_{E \rightarrow E}$, $\kappa^{\text{pre}}_{E \rightarrow I}$, $\kappa^{\text{post}}_{E \rightarrow E}$, $\kappa^{\text{post}}_{E \rightarrow I}$.'
#caption_tc_features = r'Left-to-right: full-width-half-max, minimum, maximum, mean and standard deviation of the tuning curves. \\ \textbf{Top and bottom} correspond to middle and superficial layer cells, Top-to-bottom per subplots: coloring by phase, run index, preferred orientation, and cell type.'
#caption_tc_slope = r'First Plot (left): Change in slope measured at 55 degrees, with interpolated curves for excitatory (E, red) and inhibitory (I, blue) cells separately, preferred orientation = 55 degrees. \\ Second Plot: Change in slope measured at 125 degrees, with interpolated curves for E and I cells, preferred orientation = 125 degrees. \\ \textbf{Third Plot:} Combined interpolated curves from the first and second plots, showing the slope at different preferred orientations (x-axis in degrees). \\ \textbf{Fourth Plot:} p-values from the Mann-Whitney test on data within sliding windows, calculated separately for E and I cells. \\ \textbf{Top and Bottom:} Correspond to cells in the middle and superficial layers, respectively.'
#caption_corr_offset_param = r'Top, Middle, and Bottom Panels: Middle layer parameters, superficial layer parameters, and other mixed and superficial layer parameters. \\ Left-to-right (top two rows): Regression of offset threshold with $\Delta J^{\text{layer}}_{E \rightarrow E}$, $\Delta J^{\text{layer}}_{E \rightarrow I}$, $\Delta J^{\text{layer}}_{I \rightarrow E}$, $\Delta J^{\text{layer}}_{I \rightarrow I}$, $\Delta c^{\text{layer}}_{\rightarrow E}$, $\Delta c^{\text{layer}}_{\rightarrow I}$, $\Delta J^{\text{layer}}_{I \rightarrow}$, $\Delta J^{\text{layer}}_{E \rightarrow}$, and $\frac{\Delta J^{\text{layer}}_{E \rightarrow}}{\Delta J^{\text{layer}}_{I \rightarrow}}$. \\ \textbf{Left-to-right (bottom row):} Regression of offset threshold with $\Delta f^{\text{mid} \rightarrow \text{sup}}_{E \rightarrow E}$, $\Delta f^{\text{mid} \rightarrow \text{sup}}_{E \rightarrow I}$, $\Delta \kappa^{\text{pre}}_{E \rightarrow E}$, $\Delta \kappa^{\text{pre}}_{E \rightarrow I}$, $\Delta \kappa^{\text{post}}_{E \rightarrow E}$, $\Delta \kappa^{\text{post}}_{E \rightarrow I}$, and $\frac{\Delta J^{\text{mid}}_{I \rightarrow} + J^{\text{sup}}_{I \rightarrow}}{J^{\text{mid}}_{E \rightarrow} + J^{\text{sup}}_{E \rightarrow}}$. \\ \textbf{Coloring: } red means significant negative slope, green means significant positive slope with $\alpha = 0.05$.'
#caption_MVPA_match_paper_fig = 'TBC'
#list_of_captions = [caption_schematics, [caption_offset_pre_post, caption_boxplot_rel_change], [caption_tc_features, '', '', ''], [caption_tc_slope], [caption_corr_offset_param], [caption_MVPA_match_paper_fig]]
list_of_captions = [''] * len(list_of_fig_names)
list_of_titles = [['Schematic representation of the neural network model used for the orientation discrimination task'], ['Discrimination threshold before and after training', 'Relative and absolute changes in model parameters before and after training'], ['Tuning curve features of the model before vs after training colored by phase', 'Tuning curve features colored by run index', 'Tuning curve features colored by preferred orientation', 'Tuning curve features colored by cell type'], ['Change (post-pre) in tuning curve slope measured at 55 and 125'], ['Regression plots between changes in staircase offset threshold (dependent) and changes in model parameters.'], ['MVPA scores']]
sup_title = 'Figure list for NN model analysis on Perceptual Learning'
pdf_file_name = 'output'
folder= os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'results', 'Aug15_v0', 'conf_baseline', 'figures')
scaling_vector = [[1], [0.5, 1], [1,1,1,1], [1], [1], [1]]
make_pdf_from_figures(folder, list_of_fig_names, list_of_titles, list_of_captions, sup_title, pdf_file_name, scaling_vector)
